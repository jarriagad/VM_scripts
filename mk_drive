#!/bin/bash

#This script creates a KVM image disk of n size and attaches it to any vm
#Set defaults (for now):
# default storage location /mnt/sdb/vm_store/default01
# default image format = raw

img_location=/mnt/sdb/vm_store/default01
vms_all=$( virsh list --all --name )

echo ""
echo -e "Welcome to the KVM volume creator and mounting tool!"
echo -e "Disk will be created at /mnt/sdb/vm_store/default01 by default"
echo -e "Only enter integer for disk size (GB)" 
echo -e "Please follow the convention for img names: <vm attached to>-<purpose>-<size>\n"
read -p "Enter image size: " img_size
read -p "Enter image name: " img_name
printf "Creating "$img_name" at "$img_location"\n"
read -p "Confirm? (y/n)...? " img_confirmation

#Creates image after confirmation from $img_confirmation
if [[ $img_confirmation = "y" ]]; then
	echo "Creating image..."
	qemu-img create -f raw "$img_location"/"$img_name" ${img_size}G && 
	echo "Image $img_name has been sucessfuly created!" 
else
	printf "Goodbye\n"
    exit 0
fi

read -p "Mount $img_name to a Virtual Machine? (y/n)" atch_confirmation

#Confirms and then loops to make sure that VM chosen is real
if [[ "$atch_confirmation" == "y" ]]; then
    read -p "Enter target VM name, or type 'list' to list all VMs: " target_vm
    while [[ !( "$vms_all" =~ "$target_vm" ) ]]
    do
        printf "Please choose one of the following: \n"
        printf "$vms_all \n"
        read -p "Try again: " target_vm
        if [[ "$vms_all" =~ "$target_vm" ]]; then
            printf "$img_name will be mounted on $target_vm"
            read -p "Confirm? (y/n) ..." mnt_confirmation
            break
        fi
    done
fi


#This attaches the new volume to as a block device to selected vm
if [[ $mnt_confirmation == "y" ]]; then
	read -p "enter target block target: " blk_name
	echo "Attaching $img_name to $target_vm..."
	virsh attach-disk $target_vm "$img_location"/"$img_name" $blk_name --persistent &&
	echo "Image $img_name has been sucsessfuly attached to $target_vm"
else
    printf "Goodbye \n"
    exit 0
fi

